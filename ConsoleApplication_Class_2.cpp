// ConsoleApplication_Class_2.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
/* Для ввода-вывода-изменения "Базы Данных"
   ФИО, Телефон, Адрес
   Потом адаптируем под WInForm
   Реализация через КЛАССЫ
 */

#include "Functions.h"
 #include <locale>

int _stateMenu;
void Menu()
{
    cout << "Выберите нужное Вам действие" << endl
        << "(0) Выход из программы " << endl
        << "(1) Ввод данных " << endl
        << "(2) Вывод данных " << endl
        << "(3) Изменеить данные " << endl
        << "(4) Добавить данные " << endl
        << "(5) Удалить данные " << endl        
        << "(6) Сортировка данных " << endl
        << "(7) Сохранить данные " << endl
        << "Ваш выбор: ";
    cin >> _stateMenu;
}

int main()
{
    setlocale(LC_ALL, "Russian");
    SetConsoleCP(1251); // Установка кодовой страницы win-cp 1251 в поток ввода
    SetConsoleOutputCP(1251); // Установка кодовой страницы win-cp в поток вывода
    
    Menu();
    int _action;
    string filename;

    int _size = 0; // Количество данных
    Data* d = new Data[_size]; // Массив данных

    while (_stateMenu != 0)
    {
        switch (_stateMenu)
        {
        case 1:
            system("cls"); // Очистка консоли

            cout << "Ввнести данные вручную или считать из файла?: ";
            cin >> _action;
            system("cls"); // Очистка консоли
            if (_action == 1) {
                // Ввод вручную
                DataEntry(d, _size);
            }
            else
            {
                /* Считываем из файла
                   Нужно написать если из другого файла
                   убираем комментарии и активируем код
                   cout << "Введите название файла
                   cin >> filename; // Пишем имя файла, допустим Input.txt
                   DataReading(d, _size, filename);
                */
                DataReading(d, _size, "Input.txt");
            }
            system("pause"); // Задержка консоли
            system("cls"); // очистка экрана
            Menu();
            break;
            ///////////////////////////////////////
        case 2:
            system("cls"); // очистка экрана
            if (_size != 0)
                Print(d, _size);
            else
                cout << "Данные пустые!" << endl;

            system("pause"); // Задержка консоли
            system("cls"); // очистка экрана
            Menu();
            break;
            ///////////////////////////////////////
        case 3:
            system("cls"); // очистка экрана
            
            if (_size != 0)
                DataChange(d, _size);
            else
                cout << "Данные пустые!" << endl;

            system("pause"); // Задержка консоли
            system("cls"); // очистка экрана
            Menu();
            break;
            /////////////////////////////////////////
        case 4:
            system("cls"); // очистка экрана

            if (_size != 0)
                AddData(d, _size);
            else
                cout << "Данные пустые!" << endl;
            system("pause"); // Задержка консоли
            system("cls"); // очистка экрана
            Menu();
            break;
            /////////////////////////////////////////
        case 5:
            system("cls"); // очистка экрана

            if (_size != 0)
                DeleteData(d, _size);
            else
                cout << "Данные пустые!" << endl;

            system("pause"); // Задержка консоли
            system("cls"); // очистка экрана
            Menu();
            break;
            /////////////////////////////////////////
        case 6:
            system("cls"); // очистка экрана

            if (_size != 0)
                SortingData(d, _size);
            else
                cout << "Данные пустые!" << endl;

            system("pause"); // Задержка консоли
            system("cls"); // очистка экрана
            Menu();
            break;
            /////////////////////////////////////////
        case 7:
            system("cls"); // очистка экрана
            
            if (_size != 0)
            {
                /*
                  cout << "Введите название файла: ";
                  cin >> filename; // Out.txt

                  SaveData(d, _size, filename);
                */
                SaveData(d, _size, "Out.txt");
            }
            else
                cout << "Данные пустые!" << endl;

            system("pause"); // Задержка консоли
            system("cls"); // очистка экрана
            Menu();
            break;
            /////////////////////////////////////////
        default:
            cout << "Пункт меню введен неверно!" << endl;
            system("cls"); // очистка экрана
            Menu();
            break;
        }
    }
    system("cls"); // очистка экрана
    cout << "Работа завершена!" << endl;
    system("pause"); // Задержка консоли 
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
